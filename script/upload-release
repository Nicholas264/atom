#!/usr/bin/env coffee

return unless process.env.JANKY_SHA1 and process.env.JANKY_BRANCH is 'ks-upload-release'

child_process = require 'child_process'
fs = require 'fs'
path = require 'path'

GitHub = require 'github-releases'
request = require 'request'

assetPath = '/tmp/atom-build/atom-mac-prerelease.zip'
token = process.env.ATOM_ACCESS_TOKEN

zipApp = (callback) ->
  fs.unlinkSync(assetPath) if fs.existsSync(assetPath)

  options = {cwd: path.dirname(assetPath), maxBuffer: Infinity}
  child_process.exec 'zip -r --symlinks atom-mac.zip Atom.app', options, (error, stdout, stderr) ->
    if error?
      console.error('Zipping Atom.app failed', error, stderr)
      process.exit(1)
    else
      callback()

getDraftRelease = (callback) ->
  github = new GitHub({repo: 'atom/atom', token})
  github.getReleases (error, releases=[]) ->
    if error?
      console.error('Fetching releases failed', error.message, error.stack)
      process.exit(1)

    if releases.length is 0
      console.error('No releases found in atom/atom repo')
      process.exit(1)

    for release in releases when release.draft
      callback(release)
      return

    console.error('No draft release found in atom/atom repo')
    process.exit(1)

uploadAsset = ->
  getDraftRelease (release) ->
    options =
      uri: "https://uploads.github.com/repos/atom/atom/releases/#{release.id}/assets?name=#{path.basename(assetPath)}"
      method: 'POST'
      headers:
        Authorization: "token #{token}"
        'Content-Type': 'application/zip'
        'Content-Length': fs.statSync(assetPath).size

    assetRequest = request options, (error, response, body='') ->
      if error? or response.statusCode >= 400
        console.error('Upload release asset failed', error, body)
    fs.createReadStream(assetPath).pipe(assetRequest)

zipApp(uploadAsset)
